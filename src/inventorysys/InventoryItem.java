/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inventorysys;

import java.sql.SQLException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author cath1
 */
public class InventoryItem extends javax.swing.JFrame {

    /**
     * Creates new form InventoryPanel
     */
    
    DefaultTableModel tbl;
    Connect conn;
    String inventory_name;
    int inventory_id;
    int inventoryid;
    
    public InventoryItem(int inventoryID, String inventory_name) {
        initComponents();
        String id = Integer.toString(inventoryID);
        tbl = (DefaultTableModel) jTableItems.getModel();
        conn = new Connect();
        displayTable(inventoryID);
        lblinventoryname.setText(inventory_name);
        lblInventoryID.setText(id);
        inventoryid = inventoryID;
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnHide.setEnabled(false);
        this.inventory_name = inventory_name;
        this.inventory_id = inventoryID;
    }

    public InventoryItem() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableItems = new javax.swing.JTable();
        tfSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JToggleButton();
        tfItemName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnHide = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblinventoryname = new javax.swing.JLabel();
        btnShowHiddenItems = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        btnBack = new javax.swing.JToggleButton();
        btnUnselect = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lblInventoryID = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 153, 153));

        jTableItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Name", "Description", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableItems);

        btnSearch.setText("SEARCH");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Item Name");

        jLabel2.setText("Description");

        jLabel3.setText("Quantity");

        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnHide.setText("HIDE");
        btnHide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHideActionPerformed(evt);
            }
        });

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel5.setText("Inventory Name:");

        btnShowHiddenItems.setText("CHECK HIDDEN ITEMS");
        btnShowHiddenItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowHiddenItemsActionPerformed(evt);
            }
        });

        taDescription.setColumns(20);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnUnselect.setText("UNSELECT");
        btnUnselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnselectActionPerformed(evt);
            }
        });

        jLabel4.setText("Inventory ID:");

        btnRefresh.setText("REFRESH");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(28, 28, 28)
                                .addComponent(lblInventoryID, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearch))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnHide)
                                            .addComponent(btnUpdate))
                                        .addGap(23, 23, 23)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(38, 38, 38))
                                    .addComponent(btnBack)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnShowHiddenItems, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(btnRefresh)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnUnselect)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2)))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfItemName)
                                    .addComponent(jScrollPane2)
                                    .addComponent(tfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(29, 29, 29)
                        .addComponent(lblinventoryname, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(lblinventoryname, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBack, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInventoryID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnShowHiddenItems)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUnselect)
                            .addComponent(btnRefresh))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(97, 97, 97)
                                .addComponent(jLabel3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(tfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDelete))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnHide)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdate))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void displayTable(int inventory_id){
        ArrayList<Item> item = conn.displayItem(inventory_id);
        for(Item i : item){
            String data[]={Integer.toString(i.getItemID()),i.getItemName(), i.getDescription(), Integer.toString(i.getQuantity())};
            tbl.addRow(data);
        }
    }
    
    public void displayTable(){
        ArrayList<Item1> item = conn.displayItem();
        for(Item1 c : item){
            String [] data = {Integer.toString(c.getItemID()),c.getItemName(),c.getItemDescription(),Integer.toString(c.getItemQuantity())};
            tbl.addRow(data);
        }
    }
    
    public void displaySearchTable(String tableName, String searchItem) throws SQLException{
        ArrayList<Item1> item = conn.displaySearchItem(searchItem);
        for(Item1 c : item){
            String [] data = {Integer.toString(c.getItemID()),c.getItemName(),c.getItemDescription(),Integer.toString(c.getItemQuantity())};
            tbl.addRow(data);
        }
    }
    
    public void refreshTable(String tableName, String searchItem) throws SQLException{
        tbl.setRowCount(0);
        displaySearchTable(tableName,searchItem);
    }
    
    private void btnHideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHideActionPerformed
        // TODO add your handling code here:
        int index = jTableItems.getSelectedRow();
        int ID = Integer.parseInt((String) jTableItems.getValueAt(index, 0));
        String Name = tfItemName.getText();
        String description = taDescription.getText();
        int quantity = Integer.parseInt(tfQuantity.getText());
        Item i = new Item(ID,Name,quantity);
        conn.hideItem(i);
        tfItemName.setText("");
        taDescription.setText("");
        tfQuantity.setText("");
        refreshTable();
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnHide.setEnabled(false);
        btnAdd.setEnabled(true);
    }//GEN-LAST:event_btnHideActionPerformed

    private void jTableItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableItemsMouseClicked
        // TODO add your handling code here:
        if(jTableItems.getSelectionModel().isSelectionEmpty()){
            btnDelete.setEnabled(false);
            btnUpdate.setEnabled(false);
            btnHide.setEnabled(false);
        }else{
            int index = jTableItems.getSelectedRow();
            String Name = (String) jTableItems.getValueAt(index,1);
            String description = (String) jTableItems.getValueAt(index,2);
            String Quantity = (String) jTableItems.getValueAt(index,3);
            tfItemName.setText(Name);
            tfQuantity.setText(Quantity);
            taDescription.setText(description);
            btnDelete.setEnabled(true);
            btnUpdate.setEnabled(true);
            btnHide.setEnabled(true);
            btnAdd.setEnabled(false);
        }
    }//GEN-LAST:event_jTableItemsMouseClicked

    public boolean isNumber(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch(NumberFormatException e) {
            return false;
        }
    }
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if(tfItemName.getText().isEmpty() || tfQuantity.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Please fill in all fields");
            return;
        }
        try{
            if(jTableItems.getSelectionModel().isSelectionEmpty()){
                String Name = tfItemName.getText();
                if(isNumber(Name)){
                    throw new NumberFormatException();
                }
                int quantity = Integer.parseInt(tfQuantity.getText());
                quantity = Integer.parseInt(tfQuantity.getText());
                
                if(quantity < 0){
                    throw new NumberFormatException();
                }
                
                if(!taDescription.getText().isEmpty()){
                    String description = taDescription.getText();
                    Item i = new Item(Name,quantity,description);
                    conn.addItem(i, inventory_name, inventoryid);
                }else{
                    Item i = new Item(Name,quantity,"");
                    conn.addItem(i, inventory_name, inventoryid);
                }
                
                tfItemName.setText("");
                taDescription.setText("");
                tfQuantity.setText("");
                refreshTable();
            }else{
                JOptionPane.showMessageDialog(null, "Item is already added!");
            }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Please input a valid entry!");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnShowHiddenItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowHiddenItemsActionPerformed
        // TODO add your handling code here:
        HiddenItems hide = new HiddenItems(inventory_name, inventory_id);
        hide.show();
        this.dispose();
    }//GEN-LAST:event_btnShowHiddenItemsActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if(!tfItemName.getText().equals("") && !tfQuantity.getText().equals("")){
            int index = jTableItems.getSelectedRow();
            int ItemId = Integer.parseInt((String) jTableItems.getValueAt(index, 0));
            String Name = tfItemName.getText();
            int quantity = Integer.parseInt(tfQuantity.getText());
            Item i = new Item(ItemId,Name,quantity);
            conn.deleteItem(i);
            tfItemName.setText("");
            taDescription.setText("");
            tfQuantity.setText("");
            refreshTable();
        }else{
            JOptionPane.showMessageDialog(null,"Please select a row");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        SelectInventory show = new SelectInventory();
        show.show();
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUnselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnselectActionPerformed
        // TODO add your handling code here:
        tfItemName.setText("");
        taDescription.setText("");
        tfQuantity.setText("");
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnHide.setEnabled(false);
        btnAdd.setEnabled(true);
        refreshTable();
    }//GEN-LAST:event_btnUnselectActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String searchItem = (String)tfSearch.getText();
        if(searchItem.equals("")){
            tbl.setRowCount(0);
            displayTable();
            JOptionPane.showMessageDialog(null,"Blank or Empty cannot be searched");
        }else{
            try {
                refreshTable(inventory_name,searchItem);
            } catch (SQLException ex) {
                Logger.getLogger(InventoryItem.class.getName()).log(Level.SEVERE, null, ex);
            }
           
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        btnUpdate.setEnabled(false);
        tbl.setRowCount(0);
        if(jTableItems.getModel().getRowCount()==0){
            displayTable();
        }else{
            jTableItems.clearSelection();
        }
        tfItemName.setText("");
        taDescription.setText("");
        tfQuantity.setText("");
        tfSearch.setText("");
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int index = jTableItems.getSelectedRow();
            String origname = (String) jTableItems.getValueAt(index, 1);
            String origDescription = (String) jTableItems.getValueAt(index, 2);
            String origQuantityStr = (String) jTableItems.getValueAt(index, 3);
            int origQuantity = Integer.parseInt(origQuantityStr);

            String item1 = tfItemName.getText();
            String description1 = taDescription.getText();
            int quantity1 = Integer.parseInt(tfQuantity.getText());
            if(quantity1 < 0 ){
                tfQuantity.setText(origQuantityStr);
                JOptionPane.showMessageDialog(null, "Quantity should not be less than zero!");
            }else if(isNumber(item1) || isNumber(description1)){
                tfItemName.setText(origname);
                taDescription.setText(origDescription);
                JOptionPane.showMessageDialog(null, "Name or Description should not be numeric!");
            }else{
                conn.updateItem(origname,origDescription,origQuantity,item1,description1,quantity1);
                tbl.setRowCount(0);
                displayTable();
                tfItemName.setText("");
                taDescription.setText("");
                tfQuantity.setText("");
                btnUpdate.setEnabled(false);
            }
    }//GEN-LAST:event_btnUpdateActionPerformed

    public void refreshTable(){
        tbl.setRowCount(0);
        displayTable(inventory_id);
    }
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventoryItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventoryItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventoryItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventoryItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventoryItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JToggleButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnHide;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JToggleButton btnSearch;
    private javax.swing.JButton btnShowHiddenItems;
    private javax.swing.JButton btnUnselect;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableItems;
    private javax.swing.JLabel lblInventoryID;
    private javax.swing.JLabel lblinventoryname;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField tfItemName;
    private javax.swing.JTextField tfQuantity;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}
